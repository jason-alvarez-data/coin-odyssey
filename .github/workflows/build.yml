name: Build Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            build_command: build:win
            artifact_path: |
              dist/*.exe
              dist/latest.yml
            artifact_name: windows-build
          - os: macos-latest
            build_command: build:mac
            artifact_path: |
              dist/*.dmg
              dist/latest-mac.yml
            artifact_name: macos-build
          - os: ubuntu-latest
            build_command: build:linux
            artifact_path: |
              dist/*.AppImage
              dist/latest-linux.yml
            artifact_name: linux-build

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev python3-pip build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install sqlite3
          brew install python@3

      - name: Clean install
        run: |
          echo "Cleaning previous installations..."
          rm -rf node_modules || true
          rm -f package-lock.json || true
          echo "Installing dependencies..."
          npm install --no-optional
        shell: bash

      - name: Rebuild native modules
        run: |
          echo "Rebuilding native modules..."
          npm rebuild
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "Running electron-builder install-app-deps on Windows..."
            ./node_modules/.bin/electron-builder install-app-deps
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "Running electron-builder install-app-deps on macOS..."
            node_modules/.bin/electron-builder install-app-deps
            echo "Checking better-sqlite3 installation..."
            ls -la node_modules/better-sqlite3/build/Release/
          else
            echo "Running electron-builder install-app-deps on Unix..."
            node_modules/.bin/electron-builder install-app-deps
          fi
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Initialize database template
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Running database initialization..."
          if [ "$RUNNER_OS" == "macOS" ]; then
            echo "macOS environment info:"
            sw_vers
            which sqlite3
            sqlite3 --version
          fi
          node src/database/init-db.js
          if [ ! -f "template.db" ]; then
            echo "Error: template.db was not created"
            echo "Current directory contents after attempt:"
            ls -la
            echo "Node.js version:"
            node --version
            echo "NPM version:"
            npm --version
            exit 1
          fi
          echo "Database initialization successful"
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Verify template.db
        run: |
          if [ ! -f "template.db" ]; then
            echo "Error: template.db not found"
            ls -la
            pwd
            exit 1
          fi
          echo "template.db exists and is ready for packaging"
          ls -la template.db
        shell: bash

      - name: Build application
        run: |
          echo "Starting application build..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Environment:"
          env
          echo "Directory contents:"
          ls -la
          echo "better-sqlite3 build files:"
          ls -la node_modules/better-sqlite3/build/Release/ || true
          echo "Running build command: npm run ${{ matrix.build_command }}"
          npm run ${{ matrix.build_command }} --verbose
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder,electron-builder:*

      - name: List dist directory
        run: |
          echo "Build output contents:"
          ls -la dist/
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-build/*.exe
            windows-build/latest.yml
            macos-build/*.dmg
            macos-build/latest-mac.yml
            linux-build/*.AppImage
            linux-build/latest-linux.yml
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 